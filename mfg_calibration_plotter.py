import numpy as np
import csv
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit

def func(w, q, f0):
    num = (f0 ** 4 - f0 ** 2 * w ** 2) ** 2 + (f0 ** 3 * w / q) ** 2
    den = ((f0 ** 2 - w ** 2) ** 2 + (f0 * w / q) ** 2) ** 2

    return np.sqrt(num / den)

def gen_qf0(xdata, ydata):
    popt, pcov = curve_fit(
        func,
        xdata,
        ydata,
        bounds=([0.2, 1000], [0.9, 5000]),
        method='trf'
    )

    return popt


file = open("data/P14-VM2.txt", 'r')
device_ids = file.read().split("\n")

reader = csv.reader(open("data/acc_lsm_x_14.csv", "r"), delimiter=",")
x = list(reader)
acc__x = np.array(x).astype("float")

reader = csv.reader(open("data/acc_lsm_y_14.csv", "r"), delimiter=",")
x = list(reader)
acc__y = np.array(x).astype("float")

reader = csv.reader(open("data/acc_lsm_z_14.csv", "r"), delimiter=",")
x = list(reader)
acc__z = np.array(x).astype("float")

num_meas = acc__z.shape[1]

# # correction array (multiply)
# corr_arr = [0.961198537,0.99472393,0.876792104,0.891818162,0.881534176,0.883923392,0.907525863,0.903888684,
#             0.933881542,0.936091586,0.899067014,0.855762482,0.912950066,0.889340503,0.92937917]
#
# for i in range(acc__z.shape[0]):
#     for j in range(num_meas):
#         acc__z[i, j] = acc__z[i, j]*corr_arr[j]
#     acc__z[i, 0] = 1.0
#     acc__z[i, 1] = 1.0
#     acc__z[i, 2] = 0.99
#     acc__z[i, 3] = 0.99



avg_x = np.zeros(num_meas); avg_y = np.zeros(num_meas); avg_z = np.zeros(num_meas)
med_x = np.zeros(num_meas); med_y = np.zeros(num_meas); med_z = np.zeros(num_meas)
min_x = np.zeros(num_meas); min_y = np.zeros(num_meas); min_z = np.zeros(num_meas)
max_x = np.zeros(num_meas); max_y = np.zeros(num_meas); max_z = np.zeros(num_meas)
argmax_x = np.zeros(num_meas); argmax_y = np.zeros(num_meas); argmax_z = np.zeros(num_meas)
argmin_x = np.zeros(num_meas); argmin_y = np.zeros(num_meas); argmin_z = np.zeros(num_meas)

for i in range(num_meas):
    avg_x[i] = np.average(acc__x[:, i])
    avg_y[i] = np.average(acc__y[:, i])
    avg_z[i] = np.average(acc__z[:, i])
    med_x[i] = np.median(acc__x[:, i])
    med_y[i] = np.median(acc__y[:, i])
    med_z[i] = np.median(acc__z[:, i])
    min_x[i] = np.min(acc__x[:, i])
    min_y[i] = np.min(acc__y[:, i])
    min_z[i] = np.min(acc__z[:, i])
    max_x[i] = np.max(acc__x[:, i])
    max_y[i] = np.max(acc__y[:, i])
    max_z[i] = np.max(acc__z[:, i])
    print('(', min_x[i], ', ', max_x[i], ')')


# ENVELOP_832M1 = {
#     'x': [
#         (0.79268614, 1.40434028), (0.91496492, 2.64800702), (0.61813537, 1.17886215),
#         (0.59665605, 1.43818503), (0.68036692, 1.77395462), (0.65467717, 1.99778927),
#         (0.71072334, 2.56457998), (0.60587319, 2.54549228), (0.20713707, 3.13361574),
#         (0.09087234, 3.29489498), (0.1046502, 2.67696205), (0.25177305, 4.66595808),
#         (0.57840404, 3.38904456), (0.76428168, 2.29323416), (0.82110286, 1.87128377),
#         (0.94472382, 1.96099125), (0.96103139, 2.55577392), (1.01442959, 2.70222729),
#         (0.19872234, 2.41125856), (0.17096281, 2.75693069), (0.32462071, 1.50372734),
#         (0.30991966, 1.56633618), (0.47823297, 1.63570505), (0.51019271, 1.7818741),
#         (0.47175003, 1.84519149), (0.43970237, 1.71816034), (0.58262308, 1.84446578),
#         (0.5402571, 1.95769588), (0.58003178, 2.06265263), (0.34414755, 2.49465466),
#         (0.60423901, 2.63932676), (0.65267533, 3.00883162), (0.5790486, 3.20483471),
#         (0.51131386, 3.70119828), (0.49296888, 3.95917914), (0.41443304, 3.82060668),
#         (0.40759964, 4.11530625), (0.41734668, 3.89529606), (0.40194581, 3.94044613),
#         (0.38843763, 3.73154302), (0.3903006, 3.39243532), (0.38943938, 3.52770154),
#         (0.36424541, 4.20363328), (0.41117243, 4.61159112), (0.42403352, 4.93730062),
#         (0.35912726, 4.80002789), (0.28191059, 5.96632067), (0.27435556, 5.82901543),
#         (0.29249038, 6.05718583), (0.36124656, 5.57235334), (0.33678071, 4.55847913),
#         (0.33222292, 3.7628365), (0.28576632, 3.21357133), (0.20548211, 2.1916186),
#         (0.20045347, 2.90057841), (0.16214424, 2.38115944), (0.04562915, 2.30929833),
#         (0.03620873, 1.62359122), (0.01250975, 1.35777784), (0.011434, 1.25368855)
#     ],
#     'y': [
#         (0.6357448, 1.37914042), (0.65806838, 1.47569553), (0.41008223, 1.78230368),
#         (0.40581469, 1.42854394), (0.19046349, 2.0918332), (0.41845916, 1.65339037),
#         (0.31375395, 1.66169866), (0.33296635, 1.84091091), (0.15660771, 5.46144892),
#         (0.52933431, 4.98922143), (0.61633273, 5.56538348), (0.47565538, 4.59221139),
#         (0.78570008, 2.22621535), (0.6640497, 2.68395571), (0.43690611, 1.87608913),
#         (0.39497092, 1.82244241), (0.31602884, 2.18872931), (0.31472802, 1.87615559),
#         (0.50788781, 2.88669945), (0.48267836, 3.0142491), (0.59969873, 2.94378291),
#         (0.58346406, 2.37277629), (0.64100141, 2.2414208), (0.54812423, 2.10417607),
#         (0.67891961, 2.45892835), (0.59576321, 2.25230168), (0.5906934, 2.10330153),
#         (0.45347245, 2.28098728), (0.56873484, 2.98138964), (0.35088171, 3.68270027),
#         (0.5453664, 2.56497744), (0.56344641, 2.88725339), (0.50760281, 2.96601983),
#         (0.51921742, 3.2520683), (0.59870495, 3.43387197), (0.55292475, 3.85582079),
#         (0.56501996, 4.50749147), (0.67807068, 5.01241271), (0.63182345, 4.6365275),
#         (0.53642021, 4.28868907), (0.58839856, 4.58368029), (0.39645988, 4.41706857),
#         (0.20187739, 5.67158228), (0.22842522, 5.64872334), (0.33140842, 5.37120954),
#         (0.37345747, 6.12879817), (0.36699089, 7.13803778), (0.33312821, 6.53360709),
#         (0.31511082, 5.82882286), (0.26826511, 3.91152226), (0.06773324, 2.73715554),
#         (0.13339566, 2.46890442), (0.04366289, 1.80322573), (0.07247051, 1.98575636),
#         (0.01404627, 1.71830934), (0.16085289, 1.69147437), (0.15487405, 1.47826435),
#         (0.11963692, 1.88627125), (0.08762062, 1.80620479), (0.06994575, 1.90419741)
#     ],
#     'z': [
#         (0.88221966, 1.30077698), (0.89367098, 1.32813307), (0.91126092, 1.29541354),
#         (0.92108495, 1.30193444), (0.90636021, 1.31582479), (0.90830075, 1.36136803),
#         (0.91780039, 1.31171803), (0.89730187, 1.3554028), (0.86372777, 1.45164606),
#         (0.86126836, 1.56248361), (0.88127758, 1.47156192), (0.87431604, 1.53322799),
#         (0.89419527, 1.4416433), (0.97109016, 1.42981739), (0.88208026, 1.33906481),
#         (0.85883065, 1.34120861), (0.88937918, 1.35036233), (0.88671534, 1.34843113),
#         (0.97768098, 1.4855357), (0.95405984, 1.43575305), (0.91285591, 1.42867845),
#         (0.89988079, 1.4370144), (0.89434142, 1.44174641), (0.89155438, 1.3912944),
#         (0.89198225, 1.37139029), (0.8949526, 1.36263516), (0.89352772, 1.36176675),
#         (0.89649218, 1.4044474), (0.89811484, 1.41806326), (0.89814206, 1.44356154),
#         (0.90168517, 1.45948212), (0.90216507, 1.47061211), (0.9073843, 1.48913612),
#         (0.90741526, 1.49992019), (0.90971386, 1.4948861), (0.91063965, 1.46776495),
#         (0.91256126, 1.40941749), (0.91142893, 1.41134691), (0.90840801, 1.41409048),
#         (0.90959729, 1.44764965), (0.9088722, 1.48912318), (0.91662445, 1.52638952),
#         (0.93019071, 1.55905929), (0.94199096, 1.57594532), (0.93595049, 1.58094968),
#         (0.93301164, 1.55795363), (0.91784583, 1.6248084), (0.91152647, 1.63362238),
#         (0.89572163, 1.62964575), (0.88527181, 1.65834635), (0.85154629, 1.7565117),
#         (0.87728538, 1.83446741), (0.86859914, 2.07146507), (0.95664417, 2.50566274),
#         (0.8987368, 3.13281201), (1.04129914, 3.3926698), (1.10123825, 3.00405098),
#         (1.10688429, 2.82121417), (1.08447441, 2.797599), (1.05808892, 2.81030173)
#     ]
# }

# # Check the envelopes passing
# for i in range(len(device_ids)):
#
#     for j in range(60):
#         if acc__x[i, j] < ENVELOP_832M1['x'][j][0] or acc__x[i, j] > ENVELOP_832M1['x'][j][1]:
#             print(str(device_ids[i]) + " failed x " + "at freq " + str(j))
#             print("   " + str(ENVELOP_832M1['x'][j][0]) + " to " + str(ENVELOP_832M1['x'][j][1]) + "," + str(
#                 acc__x[i, j]))
#
#         # elif acc__y[i, j] < ENVELOP_832M1['y'][j][0] or acc__y[i, j] > ENVELOP_832M1['y'][j][1]:
#         #     print(str(device_ids[i]) + " failed y " + "at freq " + str(j))
#         #     break
#         # elif acc__z[i, j] < ENVELOP_832M1['z'][j][0] or acc__z[i, j] > ENVELOP_832M1['z'][j][1]:
#         #     print(str(device_ids[i]) + " failed z " + "at freq " + str(j))
#         #     break
#
#

# Remove from plot
acc__z[21, :] = avg_z
acc__z[31, :] = avg_z
acc__z[6, :] = avg_z
acc__z[23, :] = avg_z
acc__z[17, :] = avg_z
# acc__z[48, :] = avg_z
acc__z[30, :] = avg_z
#
#
# acc__z[19, :] = avg_z


for i in range(num_meas):
    argmax_x[i] = np.argmax(acc__x[:, i])
    argmax_y[i] = np.argmax(acc__y[:, i])
    argmax_z[i] = np.argmax(acc__z[:, i])
    argmin_x[i] = np.argmin(acc__x[:, i])
    argmin_y[i] = np.argmin(acc__y[:, i])
    argmin_z[i] = np.argmin(acc__z[:, i])


# print(argmax_x)
# print(argmax_y)
# print(argmax_z)

print(argmax_x)
print(argmin_y)
print(argmax_z)

for i in argmax_z:
    i = np.int(i)


transposed = np.transpose(acc__z)

plt.plot(transposed)
# plt.ylim(0,2)
plt.show()



# Qf0s = np.matrix([[0.0 for col in range(2)] for row in range(acc__z.shape[0])])
# xdata = [100*(i+1) for i in range(15)]
# for i in range(acc__z.shape[0]):
#     ydata = acc__z[i, :]
#     popt = gen_qf0(xdata, ydata)
#     Qf0s[i, 0] = popt[0]
#     Qf0s[i, 1] = popt[1]
#
# print("Qf0s: ")
# print(Qf0s)
#
# newpts = np.linspace(0, 1500, 150)
# newvals = [0.0 for j in range(len(newpts))]
# for j in range(acc__z.shape[0]):
#     for i in range(len(newvals)):
#         newvals[i] = func(newpts[i], Qf0s[j, 0], Qf0s[j, 1])
#     plt.plot(newpts, newvals)
#
# plt.show()
